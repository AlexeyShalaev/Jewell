import logging

from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Regexp

from TelegramBot.tgbot.keyboards import menu
from TelegramBot.tgbot.keyboards.snapshots import create_backups_keyboard
from TelegramBot.tgbot.misc.terminal import restart_website
from TelegramBot.tgbot.services.api import snapshot_dump, snapshot_backups, stars_export_attendance


async def bot_admin_reload_website(message: types.Message):
    try:
        restart_website()
        await message.answer("–°–∞–π—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as ex:
        logging.error(ex)
        await message.answer(f'–û—à–∏–±–∫–∞: {ex}')


async def bot_admin_dump(message: types.Message):
    status = snapshot_dump(message.chat.id)
    if status:
        await message.answer("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")


async def bot_admin_backups(message: types.Message):
    status, files = snapshot_backups()
    if not status:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π.")
    elif len(files) == 0:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π.")
    else:
        files.reverse()
        keyboard = create_backups_keyboard(files)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", reply_markup=keyboard)


async def bot_admin_stars_export_month_choose_month(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü", reply_markup=menu.stars_month)


async def bot_admin_stars_export_month(message: types.Message):
    month = message.text.split(': ')[1]
    months = {
        "—Å–µ–Ω—Ç—è–±—Ä—å": 9,
        "–æ–∫—Ç—è–±—Ä—å": 10,
        "–Ω–æ—è–±—Ä—å": 11,
        "–¥–µ–∫–∞–±—Ä—å": 12,
        "—è–Ω–≤–∞—Ä—å": 1,
        "—Ñ–µ–≤—Ä–∞–ª—å": 2,
        "–º–∞—Ä—Ç": 3,
        "–∞–ø—Ä–µ–ª—å": 4,
        "–º–∞–π": 5,
        "–∏—é–Ω—å": 6
    }
    chosen_month = months.get(month)
    if chosen_month is None:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü", reply_markup=menu.stars_month)
    else:
        status, info = stars_export_attendance(chosen_month)
        await message.answer(f"–≠–∫—Å–ø–æ—Ä—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞ –º–µ—Å—è—Ü {month} –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n[{status}]\n{info}")


def register_admin(dp: Dispatcher):
    dp.register_message_handler(bot_admin_reload_website, text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∞–π—Ç üîÉ", is_group=False, role='admin')
    dp.register_message_handler(bot_admin_dump, text="–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é üíΩÔ∏è", is_group=False, role='admin')
    dp.register_message_handler(bot_admin_backups, text="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ üóÉ", is_group=False,
                                role='admin')
    dp.register_message_handler(bot_admin_stars_export_month_choose_month, text="–≠—Å–∫–ø–æ—Ä—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –≤ Stars", is_group=False,
                                role='admin')
    dp.register_message_handler(
        bot_admin_stars_export_month,
        Regexp(r"^Stars: [–∞-—è–ê-–Ø—ë–Å]+$"),
        is_group=False,
        role='admin'
    )
