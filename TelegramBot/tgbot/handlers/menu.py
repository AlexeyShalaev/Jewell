from aiogram import types, Dispatcher
from TelegramBot.tgbot import links
from TelegramBot.tgbot.keyboards import menu, account
from TelegramBot.tgbot.services.MongoDB.users import get_user_by_telegram_id, Role
from TelegramBot.tgbot.services.api import get_admin_attendance, get_student_attendance


async def bot_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=menu.categories)


async def bot_admin_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=menu.admin)


async def bot_menu_account(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª", reply_markup=account.registered)


async def bot_menu_attendance(message: types.Message):
    r = get_user_by_telegram_id(message.from_user.id)
    if not r.success:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
    else:
        user = r.data
        if user.role == Role.ADMIN:
            status, data = get_admin_attendance()
            if not status:
                await message.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
            else:
                msg = '–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –≤—ã–±—Ä–∞–≤—à–∏—Ö –ø–æ–µ–∑–¥–∫—É, —Å –ø–ª–æ—Ö–æ–π –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å—é:\n\n'
                for i in data:
                    msg += f'[{i["name"]}]({i["href"]}): {i["visits"]}\n'
                await message.answer(msg, parse_mode=types.ParseMode.MARKDOWN)
        elif user.role == Role.STUDENT:
            status, data = get_student_attendance(str(user.id))
            if not status:
                await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.")
            else:
                msg = f'[–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏]({data["href"]})\n\n' \
                      f'–ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π:    *{data["visits_count"]}*/{data["visits_aim"]}\n' \
                      f'–ü—Ä–æ—Ü–µ–Ω—Ç—ã:                         *{data["percent"]}*%\n' \
                      f'–ß–∞—Å—Ç–æ—Ç–∞:                           *{data["frequency"]}*\n' \
                      f'\n{data["extra_info"]}'
                await message.answer(msg, parse_mode=types.ParseMode.MARKDOWN)
        else:
            await message.answer("–î–∞–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º.")


async def bot_menu_schedule(message: types.Message):
    await message.answer_photo(links.courses_image, f'[–ö–£–†–°–´ –Ø–•–ê–î JEWELL]({links.courses})',
                               parse_mode=types.ParseMode.MARKDOWN)


async def bot_menu_chat(message: types.Message):
    await message.answer(f"–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ [—Å—Å—ã–ª–∫–µ]({links.chat}) –∏ –æ–±—â–∞–π—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã —Å–æ –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–ª—É–±–∞!",
                         parse_mode=types.ParseMode.MARKDOWN)


def register_menu(dp: Dispatcher):
    dp.register_message_handler(bot_menu, commands=['menu', 'help', 'info', 'start'])
    dp.register_message_handler(bot_admin_menu, commands=['admin'], is_group=False, role='admin')
    dp.register_message_handler(bot_menu, text="–ù–∞–∑–∞–¥ üîô")
    dp.register_message_handler(bot_menu_attendance, text="–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å ‚úÖ", registered=True)
    dp.register_message_handler(bot_menu_account, text="–ê–∫–∫–∞—É–Ω—Ç ‚öô", registered=True, is_group=False)
    dp.register_message_handler(bot_menu_schedule, text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ")
    dp.register_message_handler(bot_menu_chat, text="–ß–∞—Ç üí¨")
